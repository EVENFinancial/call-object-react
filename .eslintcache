[{"/Users/davidkim/Projects/call-object-react/src/index.js":"1","/Users/davidkim/Projects/call-object-react/src/components/App/App.js":"2","/Users/davidkim/Projects/call-object-react/src/components/BrowserUnsupported/BrowserUnsupported.js":"3","/Users/davidkim/Projects/call-object-react/src/api.js":"4","/Users/davidkim/Projects/call-object-react/src/CallObjectContext.js":"5","/Users/davidkim/Projects/call-object-react/src/urlUtils.js":"6","/Users/davidkim/Projects/call-object-react/src/logUtils.js":"7","/Users/davidkim/Projects/call-object-react/src/components/StartButton/StartButton.js":"8","/Users/davidkim/Projects/call-object-react/src/components/Call/Call.js":"9","/Users/davidkim/Projects/call-object-react/src/components/Tray/Tray.js":"10","/Users/davidkim/Projects/call-object-react/src/components/Call/callState.js":"11","/Users/davidkim/Projects/call-object-react/src/components/Tile/Tile.js":"12","/Users/davidkim/Projects/call-object-react/src/components/CallMessage/CallMessage.js":"13","/Users/davidkim/Projects/call-object-react/src/components/Chat/Chat.js":"14","/Users/davidkim/Projects/call-object-react/src/components/TrayButton/TrayButton.js":"15","/Users/davidkim/Projects/call-object-react/src/components/Icon/Icon.js":"16"},{"size":388,"mtime":1608239844553,"results":"17","hashOfConfig":"18"},{"size":8627,"mtime":1608325049656,"results":"19","hashOfConfig":"18"},{"size":471,"mtime":1608239844549,"results":"20","hashOfConfig":"18"},{"size":924,"mtime":1608323741818,"results":"21","hashOfConfig":"18"},{"size":66,"mtime":1608239844548,"results":"22","hashOfConfig":"18"},{"size":342,"mtime":1608239844554,"results":"23","hashOfConfig":"18"},{"size":82,"mtime":1608239844554,"results":"24","hashOfConfig":"18"},{"size":596,"mtime":1608323534890,"results":"25","hashOfConfig":"18"},{"size":5161,"mtime":1608324337814,"results":"26","hashOfConfig":"18"},{"size":3889,"mtime":1608316412955,"results":"27","hashOfConfig":"18"},{"size":4419,"mtime":1608320287961,"results":"28","hashOfConfig":"18"},{"size":1970,"mtime":1608324557053,"results":"29","hashOfConfig":"18"},{"size":369,"mtime":1608239844551,"results":"30","hashOfConfig":"18"},{"size":2322,"mtime":1608316071334,"results":"31","hashOfConfig":"18"},{"size":688,"mtime":1608239844553,"results":"32","hashOfConfig":"18"},{"size":6163,"mtime":1608239844551,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yfnj9c",{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/Users/davidkim/Projects/call-object-react/src/index.js",[],"/Users/davidkim/Projects/call-object-react/src/components/App/App.js",["69"],"/Users/davidkim/Projects/call-object-react/src/components/BrowserUnsupported/BrowserUnsupported.js",[],"/Users/davidkim/Projects/call-object-react/src/api.js",["70"],"/Users/davidkim/Projects/call-object-react/src/CallObjectContext.js",[],"/Users/davidkim/Projects/call-object-react/src/urlUtils.js",[],"/Users/davidkim/Projects/call-object-react/src/logUtils.js",[],"/Users/davidkim/Projects/call-object-react/src/components/StartButton/StartButton.js",[],["71","72"],"/Users/davidkim/Projects/call-object-react/src/components/Call/Call.js",["73"],"/Users/davidkim/Projects/call-object-react/src/components/Tray/Tray.js",["74","75","76","77","78","79"],"import React, { useContext, useEffect, useState } from 'react';\nimport './Tray.css';\nimport TrayButton, {\n  TYPE_MUTE_CAMERA,\n  TYPE_MUTE_MIC,\n  TYPE_SCREEN,\n  TYPE_LEAVE,\n  TYPE_CHAT,\n} from '../TrayButton/TrayButton';\nimport Chat from '../Chat/Chat';\nimport CallObjectContext from '../../CallObjectContext';\nimport { logDailyEvent } from '../../logUtils';\nimport DailyIframe from '@daily-co/daily-js';\n\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n    isMicMuted,\n    isSharingScreen = false;\n  if (\n    callObject &&\n    callObject.participants() &&\n    callObject.participants().local\n  ) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\nexport default function Tray(props) {\n  const callObject = useContext(CallObjectContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(true);\n  const [highlightedChat, setChatHighlight] = useState(false);\n  const [highlightedMusic, setMusicHighlight] = useState(props.musicMuted);\n\n  function toggleCamera() {\n    callObject.setLocalVideo(isCameraMuted);\n  }\n\n  function toggleMic() {\n    callObject.setLocalAudio(isMicMuted);\n  }\n\n  const toggleMusicMute = () => {\n    highlightedMusic ? props.player.unMute() : props.player.mute();\n    setMusicHighlight(!highlightedMusic);\n  };\n\n  function toggleSharingScreen() {\n    isSharingScreen\n      ? callObject.stopScreenShare()\n      : callObject.startScreenShare();\n  }\n\n  function leaveCall() {\n    props.onClickLeaveCall && props.onClickLeaveCall();\n  }\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(\n        callObject\n      );\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    callObject.on('participant-updated', handleNewParticipantsState);\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n\n  return (\n    <footer className=\"tray\">\n      <TrayButton\n        type={TYPE_MUTE_CAMERA}\n        disabled={props.disabled}\n        highlighted={isCameraMuted}\n        onClick={toggleCamera}\n      />\n      <TrayButton\n        type={TYPE_MUTE_MIC}\n        disabled={props.disabled}\n        highlighted={isMicMuted}\n        onClick={toggleMic}\n      />\n      {DailyIframe.supportedBrowser().supportsScreenShare && (\n        <TrayButton\n          type={TYPE_SCREEN}\n          disabled={props.disabled}\n          highlighted={isSharingScreen}\n          onClick={toggleSharingScreen}\n        />\n      )}\n      <button\n        disabled={props.disabled}\n        highlighted={setMusicHighlight}\n        onClick={toggleMusicMute}\n      >\n        {!highlightedMusic ? 'Mute Music' : 'Unmute Music'}\n      </button>\n      <Chat onClickDisplay={displayChat} />\n    </footer>\n  );\n}\n","/Users/davidkim/Projects/call-object-react/src/components/Call/callState.js",[],"/Users/davidkim/Projects/call-object-react/src/components/Tile/Tile.js",[],"/Users/davidkim/Projects/call-object-react/src/components/CallMessage/CallMessage.js",[],"/Users/davidkim/Projects/call-object-react/src/components/Chat/Chat.js",["80"],"import React, { useContext, useState, useEffect } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport './Chat.css';\nimport '../../index.css';\n\nexport default function Chat(props) {\n  const callObject = useContext(CallObjectContext);\n  const [inputValue, setInputValue] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    callObject.sendAppMessage({ message: inputValue }, '*');\n    const name = callObject.participants().local.user_name\n      ? callObject.participants().local.user_name\n      : 'Guest';\n    setChatHistory([\n      ...chatHistory,\n      {\n        sender: name,\n        message: inputValue,\n      },\n    ]);\n    setInputValue('');\n  }\n\n  /**\n   * Update chat state based on a message received to all participants.\n   *\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      const participants = callObject.participants();\n      const name = participants[event.fromId].user_name\n        ? participants[event.fromId].user_name\n        : 'Guest';\n      setChatHistory([\n        ...chatHistory,\n        {\n          sender: name,\n          message: event.data.message,\n        },\n      ]);\n      // Make other icons light up\n      props.notification();\n    }\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject, chatHistory]);\n\n  useEffect(() => {}, [chatHistory]);\n\n  return (\n    <div className=\"chat border border-dotted border-black\">\n      {chatHistory.map((entry, index) => (\n        <div key={`entry-${index}`} className=\"messageList\">\n          <b>{entry.sender}</b>: {entry.message}\n        </div>\n      ))}\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"chatInput\"></label>\n        <input\n          id=\"chatInput\"\n          className=\"chat-input\"\n          type=\"text\"\n          placeholder=\"Type your message here..\"\n          value={inputValue}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\" className=\"send-chat-button\">\n          Send\n        </button>\n      </form>\n    </div>\n  );\n}\n","/Users/davidkim/Projects/call-object-react/src/components/TrayButton/TrayButton.js",[],"/Users/davidkim/Projects/call-object-react/src/components/Icon/Icon.js",[],{"ruleId":"81","severity":1,"message":"82","line":74,"column":9,"nodeType":"83","messageId":"84","endLine":74,"endColumn":25},{"ruleId":"85","severity":1,"message":"86","line":30,"column":1,"nodeType":"87","endLine":30,"endColumn":31},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"81","severity":1,"message":"92","line":15,"column":3,"nodeType":"83","messageId":"84","endLine":15,"endColumn":22},{"ruleId":"81","severity":1,"message":"93","line":7,"column":3,"nodeType":"83","messageId":"84","endLine":7,"endColumn":13},{"ruleId":"81","severity":1,"message":"94","line":8,"column":3,"nodeType":"83","messageId":"84","endLine":8,"endColumn":12},{"ruleId":"81","severity":1,"message":"95","line":47,"column":23,"nodeType":"83","messageId":"84","endLine":47,"endColumn":37},{"ruleId":"81","severity":1,"message":"96","line":48,"column":10,"nodeType":"83","messageId":"84","endLine":48,"endColumn":25},{"ruleId":"81","severity":1,"message":"97","line":48,"column":27,"nodeType":"83","messageId":"84","endLine":48,"endColumn":43},{"ruleId":"81","severity":1,"message":"98","line":70,"column":12,"nodeType":"83","messageId":"84","endLine":70,"endColumn":21},{"ruleId":"99","severity":1,"message":"100","line":61,"column":6,"nodeType":"101","endLine":61,"endColumn":31,"suggestions":"102"},"no-unused-vars","'startLeavingCall' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["103"],"no-negated-in-lhs",["104"],"'containsScreenShare' is defined but never used.","'TYPE_LEAVE' is defined but never used.","'TYPE_CHAT' is defined but never used.","'setChatDisplay' is assigned a value but never used.","'highlightedChat' is assigned a value but never used.","'setChatHighlight' is assigned a value but never used.","'leaveCall' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["105"],"no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},"Update the dependencies array to be: [callObject, chatHistory, props]",{"range":"108","text":"109"},[1573,1598],"[callObject, chatHistory, props]"]